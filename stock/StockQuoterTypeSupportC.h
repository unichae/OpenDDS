// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_STOCKQUOTERTYPESUPPORTC_ZAV5LH_H_
#define _TAO_IDL_STOCKQUOTERTYPESUPPORTC_ZAV5LH_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "StockQuoterCommon_Export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "StockQuoterC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO StockQuoterCommon_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace StockQuoter
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< StockQuoter::Quote, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> QuoteSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_QUOTETYPESUPPORT__VAR_OUT_CH_)
#define _STOCKQUOTER_QUOTETYPESUPPORT__VAR_OUT_CH_

  class QuoteTypeSupport;
  typedef QuoteTypeSupport *QuoteTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        QuoteTypeSupport
      >
    QuoteTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        QuoteTypeSupport
      >
    QuoteTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export QuoteTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef QuoteTypeSupport_ptr _ptr_type;
    typedef QuoteTypeSupport_var _var_type;
    typedef QuoteTypeSupport_out _out_type;

    // The static operations.
    static QuoteTypeSupport_ptr _duplicate (QuoteTypeSupport_ptr obj);

    static void _tao_release (QuoteTypeSupport_ptr obj);

    static QuoteTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static QuoteTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static QuoteTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    QuoteTypeSupport (void);

    

    virtual ~QuoteTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (QuoteTypeSupport (const QuoteTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteTypeSupport (QuoteTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (QuoteTypeSupport &operator= (const QuoteTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteTypeSupport &operator= (QuoteTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_QUOTEDATAWRITER__VAR_OUT_CH_)
#define _STOCKQUOTER_QUOTEDATAWRITER__VAR_OUT_CH_

  class QuoteDataWriter;
  typedef QuoteDataWriter *QuoteDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        QuoteDataWriter
      >
    QuoteDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        QuoteDataWriter
      >
    QuoteDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export QuoteDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef QuoteDataWriter_ptr _ptr_type;
    typedef QuoteDataWriter_var _var_type;
    typedef QuoteDataWriter_out _out_type;

    // The static operations.
    static QuoteDataWriter_ptr _duplicate (QuoteDataWriter_ptr obj);

    static void _tao_release (QuoteDataWriter_ptr obj);

    static QuoteDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static QuoteDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static QuoteDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::StockQuoter::Quote & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::StockQuoter::Quote & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::StockQuoter::Quote & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::StockQuoter::Quote & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::StockQuoter::Quote & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::StockQuoter::Quote & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::StockQuoter::Quote & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::StockQuoter::Quote & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::StockQuoter::Quote & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::StockQuoter::Quote & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    QuoteDataWriter (void);

    

    virtual ~QuoteDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (QuoteDataWriter (const QuoteDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteDataWriter (QuoteDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (QuoteDataWriter &operator= (const QuoteDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteDataWriter &operator= (QuoteDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_QUOTEDATAREADER__VAR_OUT_CH_)
#define _STOCKQUOTER_QUOTEDATAREADER__VAR_OUT_CH_

  class QuoteDataReader;
  typedef QuoteDataReader *QuoteDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        QuoteDataReader
      >
    QuoteDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        QuoteDataReader
      >
    QuoteDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export QuoteDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef QuoteDataReader_ptr _ptr_type;
    typedef QuoteDataReader_var _var_type;
    typedef QuoteDataReader_out _out_type;

    // The static operations.
    static QuoteDataReader_ptr _duplicate (QuoteDataReader_ptr obj);

    static void _tao_release (QuoteDataReader_ptr obj);

    static QuoteDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static QuoteDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static QuoteDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::StockQuoter::QuoteSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::StockQuoter::QuoteSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::StockQuoter::Quote & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::StockQuoter::Quote & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::StockQuoter::QuoteSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::StockQuoter::QuoteSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::StockQuoter::QuoteSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::StockQuoter::Quote & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::StockQuoter::Quote & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    QuoteDataReader (void);

    

    virtual ~QuoteDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (QuoteDataReader (const QuoteDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteDataReader (QuoteDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (QuoteDataReader &operator= (const QuoteDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (QuoteDataReader &operator= (QuoteDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module StockQuoter

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace StockQuoter
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< StockQuoter::ExchangeEvent, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> ExchangeEventSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_EXCHANGEEVENTTYPESUPPORT__VAR_OUT_CH_)
#define _STOCKQUOTER_EXCHANGEEVENTTYPESUPPORT__VAR_OUT_CH_

  class ExchangeEventTypeSupport;
  typedef ExchangeEventTypeSupport *ExchangeEventTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        ExchangeEventTypeSupport
      >
    ExchangeEventTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        ExchangeEventTypeSupport
      >
    ExchangeEventTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export ExchangeEventTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef ExchangeEventTypeSupport_ptr _ptr_type;
    typedef ExchangeEventTypeSupport_var _var_type;
    typedef ExchangeEventTypeSupport_out _out_type;

    // The static operations.
    static ExchangeEventTypeSupport_ptr _duplicate (ExchangeEventTypeSupport_ptr obj);

    static void _tao_release (ExchangeEventTypeSupport_ptr obj);

    static ExchangeEventTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static ExchangeEventTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ExchangeEventTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ExchangeEventTypeSupport (void);

    

    virtual ~ExchangeEventTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventTypeSupport (const ExchangeEventTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventTypeSupport (ExchangeEventTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventTypeSupport &operator= (const ExchangeEventTypeSupport &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventTypeSupport &operator= (ExchangeEventTypeSupport &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_EXCHANGEEVENTDATAWRITER__VAR_OUT_CH_)
#define _STOCKQUOTER_EXCHANGEEVENTDATAWRITER__VAR_OUT_CH_

  class ExchangeEventDataWriter;
  typedef ExchangeEventDataWriter *ExchangeEventDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        ExchangeEventDataWriter
      >
    ExchangeEventDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        ExchangeEventDataWriter
      >
    ExchangeEventDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export ExchangeEventDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef ExchangeEventDataWriter_ptr _ptr_type;
    typedef ExchangeEventDataWriter_var _var_type;
    typedef ExchangeEventDataWriter_out _out_type;

    // The static operations.
    static ExchangeEventDataWriter_ptr _duplicate (ExchangeEventDataWriter_ptr obj);

    static void _tao_release (ExchangeEventDataWriter_ptr obj);

    static ExchangeEventDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static ExchangeEventDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ExchangeEventDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::StockQuoter::ExchangeEvent & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::StockQuoter::ExchangeEvent & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::StockQuoter::ExchangeEvent & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::StockQuoter::ExchangeEvent & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::StockQuoter::ExchangeEvent & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::StockQuoter::ExchangeEvent & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::StockQuoter::ExchangeEvent & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::StockQuoter::ExchangeEvent & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::StockQuoter::ExchangeEvent & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::StockQuoter::ExchangeEvent & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ExchangeEventDataWriter (void);

    

    virtual ~ExchangeEventDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataWriter (const ExchangeEventDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataWriter (ExchangeEventDataWriter &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataWriter &operator= (const ExchangeEventDataWriter &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataWriter &operator= (ExchangeEventDataWriter &&))
#endif /* ACE_HAS_CPP11 */
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_STOCKQUOTER_EXCHANGEEVENTDATAREADER__VAR_OUT_CH_)
#define _STOCKQUOTER_EXCHANGEEVENTDATAREADER__VAR_OUT_CH_

  class ExchangeEventDataReader;
  typedef ExchangeEventDataReader *ExchangeEventDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        ExchangeEventDataReader
      >
    ExchangeEventDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        ExchangeEventDataReader
      >
    ExchangeEventDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class StockQuoterCommon_Export ExchangeEventDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef ExchangeEventDataReader_ptr _ptr_type;
    typedef ExchangeEventDataReader_var _var_type;
    typedef ExchangeEventDataReader_out _out_type;

    // The static operations.
    static ExchangeEventDataReader_ptr _duplicate (ExchangeEventDataReader_ptr obj);

    static void _tao_release (ExchangeEventDataReader_ptr obj);

    static ExchangeEventDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static ExchangeEventDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static ExchangeEventDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::StockQuoter::ExchangeEventSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::StockQuoter::ExchangeEventSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::StockQuoter::ExchangeEvent & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::StockQuoter::ExchangeEvent & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::StockQuoter::ExchangeEventSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::StockQuoter::ExchangeEventSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::StockQuoter::ExchangeEventSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::StockQuoter::ExchangeEvent & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::StockQuoter::ExchangeEvent & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    ExchangeEventDataReader (void);

    

    virtual ~ExchangeEventDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataReader (const ExchangeEventDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataReader (ExchangeEventDataReader &&))
#endif /* ACE_HAS_CPP11 */
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataReader &operator= (const ExchangeEventDataReader &))
#if defined (ACE_HAS_CPP11)
    ACE_UNIMPLEMENTED_FUNC (ExchangeEventDataReader &operator= (ExchangeEventDataReader &&))
#endif /* ACE_HAS_CPP11 */
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module StockQuoter

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_STOCKQUOTER_QUOTETYPESUPPORT__TRAITS_)
#define _STOCKQUOTER_QUOTETYPESUPPORT__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::QuoteTypeSupport>
  {
    static ::StockQuoter::QuoteTypeSupport_ptr duplicate (
        ::StockQuoter::QuoteTypeSupport_ptr p);
    static void release (
        ::StockQuoter::QuoteTypeSupport_ptr p);
    static ::StockQuoter::QuoteTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::QuoteTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCKQUOTER_QUOTEDATAWRITER__TRAITS_)
#define _STOCKQUOTER_QUOTEDATAWRITER__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::QuoteDataWriter>
  {
    static ::StockQuoter::QuoteDataWriter_ptr duplicate (
        ::StockQuoter::QuoteDataWriter_ptr p);
    static void release (
        ::StockQuoter::QuoteDataWriter_ptr p);
    static ::StockQuoter::QuoteDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::QuoteDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCKQUOTER_QUOTEDATAREADER__TRAITS_)
#define _STOCKQUOTER_QUOTEDATAREADER__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::QuoteDataReader>
  {
    static ::StockQuoter::QuoteDataReader_ptr duplicate (
        ::StockQuoter::QuoteDataReader_ptr p);
    static void release (
        ::StockQuoter::QuoteDataReader_ptr p);
    static ::StockQuoter::QuoteDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::QuoteDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCKQUOTER_EXCHANGEEVENTTYPESUPPORT__TRAITS_)
#define _STOCKQUOTER_EXCHANGEEVENTTYPESUPPORT__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::ExchangeEventTypeSupport>
  {
    static ::StockQuoter::ExchangeEventTypeSupport_ptr duplicate (
        ::StockQuoter::ExchangeEventTypeSupport_ptr p);
    static void release (
        ::StockQuoter::ExchangeEventTypeSupport_ptr p);
    static ::StockQuoter::ExchangeEventTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::ExchangeEventTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCKQUOTER_EXCHANGEEVENTDATAWRITER__TRAITS_)
#define _STOCKQUOTER_EXCHANGEEVENTDATAWRITER__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::ExchangeEventDataWriter>
  {
    static ::StockQuoter::ExchangeEventDataWriter_ptr duplicate (
        ::StockQuoter::ExchangeEventDataWriter_ptr p);
    static void release (
        ::StockQuoter::ExchangeEventDataWriter_ptr p);
    static ::StockQuoter::ExchangeEventDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::ExchangeEventDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_STOCKQUOTER_EXCHANGEEVENTDATAREADER__TRAITS_)
#define _STOCKQUOTER_EXCHANGEEVENTDATAREADER__TRAITS_

  template<>
  struct StockQuoterCommon_Export Objref_Traits< ::StockQuoter::ExchangeEventDataReader>
  {
    static ::StockQuoter::ExchangeEventDataReader_ptr duplicate (
        ::StockQuoter::ExchangeEventDataReader_ptr p);
    static void release (
        ::StockQuoter::ExchangeEventDataReader_ptr p);
    static ::StockQuoter::ExchangeEventDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::StockQuoter::ExchangeEventDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "StockQuoterTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

