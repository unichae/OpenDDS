/* Generated by /home/unichae/workspace/OpenDDS-3.14/bin/opendds_idl version 3.14 (ACE version 6.2a_p19) running on input file StockQuoter.idl */
#include "StockQuoterTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TimeBase */



/* Begin TYPEDEF: TimeT */


/* End TYPEDEF: TimeT */


/* Begin TYPEDEF: InaccuracyT */


/* End TYPEDEF: InaccuracyT */


/* Begin TYPEDEF: TdfT */


/* End TYPEDEF: TdfT */


/* Begin STRUCT: UtcT */


/* End STRUCT: UtcT */


/* Begin STRUCT: IntervalT */


/* End STRUCT: IntervalT */

/* End MODULE: TimeBase */


/* Begin MODULE: StockQuoter */



/* Begin STRUCT: Quote */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const StockQuoter::Quote& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.ticker.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.exchange.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.full_name.in()) + 1;
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.value);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
}

bool operator<<(Serializer& strm, const StockQuoter::Quote& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.ticker.in())
    && (strm << stru.exchange.in())
    && (strm << stru.full_name.in())
    && (strm << stru.value)
    && (strm << stru.timestamp);
}

bool operator>>(Serializer& strm, StockQuoter::Quote& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.ticker.out())
    && (strm >> stru.exchange.out())
    && (strm >> stru.full_name.out())
    && (strm >> stru.value)
    && (strm >> stru.timestamp);
}

size_t gen_max_marshaled_size(const StockQuoter::Quote& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const StockQuoter::Quote> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const StockQuoter::Quote> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.ticker.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const StockQuoter::Quote> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.ticker.in());
}

bool operator>>(Serializer& strm, KeyOnly<StockQuoter::Quote> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.ticker.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace StockQuoter {
::DDS::DataWriter_ptr QuoteTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Quote> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr QuoteTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Quote> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr QuoteTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Quote> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Quote, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& QuoteTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Quote>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool QuoteTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* QuoteTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

QuoteTypeSupport::_ptr_type QuoteTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<StockQuoter::Quote> : MetaStruct {
  typedef StockQuoter::Quote T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "ticker")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const StockQuoter::Quote& typed = *static_cast<const StockQuoter::Quote*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "ticker") == 0) {
      return typed.ticker.in();
    }
    if (std::strcmp(field, "exchange") == 0) {
      return typed.exchange.in();
    }
    if (std::strcmp(field, "full_name") == 0) {
      return typed.full_name.in();
    }
    if (std::strcmp(field, "value") == 0) {
      return typed.value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::Quote)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "ticker") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'ticker' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'ticker' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'ticker' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "exchange") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'exchange' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'exchange' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'exchange' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "full_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'full_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'full_name' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'full_name' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "value") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'value' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'value' could not be skipped");
      }
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timestamp' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct StockQuoter::Quote");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "ticker") == 0) {
      return make_field_cmp(&T::ticker, next);
    }
    if (std::strcmp(field, "exchange") == 0) {
      return make_field_cmp(&T::exchange, next);
    }
    if (std::strcmp(field, "full_name") == 0) {
      return make_field_cmp(&T::full_name, next);
    }
    if (std::strcmp(field, "value") == 0) {
      return make_field_cmp(&T::value, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::Quote)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"ticker", "exchange", "full_name", "value", "timestamp", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "ticker") == 0) {
      return &static_cast<const T*>(stru)->ticker;
    }
    if (std::strcmp(field, "exchange") == 0) {
      return &static_cast<const T*>(stru)->exchange;
    }
    if (std::strcmp(field, "full_name") == 0) {
      return &static_cast<const T*>(stru)->full_name;
    }
    if (std::strcmp(field, "value") == 0) {
      return &static_cast<const T*>(stru)->value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::Quote)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "ticker") == 0) {
      static_cast<T*>(lhs)->ticker = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "exchange") == 0) {
      static_cast<T*>(lhs)->exchange = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "full_name") == 0) {
      static_cast<T*>(lhs)->full_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "value") == 0) {
      static_cast<T*>(lhs)->value = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TimeBase::TimeT*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::Quote)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "ticker") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->ticker.in(), static_cast<const T*>(rhs)->ticker.in());
    }
    if (std::strcmp(field, "exchange") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->exchange.in(), static_cast<const T*>(rhs)->exchange.in());
    }
    if (std::strcmp(field, "full_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->full_name.in(), static_cast<const T*>(rhs)->full_name.in());
    }
    if (std::strcmp(field, "value") == 0) {
      return static_cast<const T*>(lhs)->value == static_cast<const T*>(rhs)->value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::Quote)");
  }
};

template<>
const MetaStruct& getMetaStruct<StockQuoter::Quote>()
{
  static MetaStructImpl<StockQuoter::Quote> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, StockQuoter::Quote*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<StockQuoter::Quote>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Quote */


/* Begin ENUM: ExchangeEventType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const StockQuoter::ExchangeEventType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, StockQuoter::ExchangeEventType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<StockQuoter::ExchangeEventType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_StockQuoter_ExchangeEventType_names[] = {
  "TRADING_OPENED",
  "TRADING_CLOSED",
  "TRADING_SUSPENDED",
  "TRADING_RESUMED"
};
const size_t gen_StockQuoter_ExchangeEventType_names_size = 4;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: ExchangeEventType */


/* Begin STRUCT: ExchangeEvent */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const StockQuoter::ExchangeEvent& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.exchange.in()) + 1;
  find_size_ulong(size, padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
}

bool operator<<(Serializer& strm, const StockQuoter::ExchangeEvent& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.exchange.in())
    && (strm << stru.event)
    && (strm << stru.timestamp);
}

bool operator>>(Serializer& strm, StockQuoter::ExchangeEvent& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.exchange.out())
    && (strm >> stru.event)
    && (strm >> stru.timestamp);
}

size_t gen_max_marshaled_size(const StockQuoter::ExchangeEvent& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const StockQuoter::ExchangeEvent> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const StockQuoter::ExchangeEvent> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.exchange.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const StockQuoter::ExchangeEvent> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.exchange.in());
}

bool operator>>(Serializer& strm, KeyOnly<StockQuoter::ExchangeEvent> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.exchange.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace StockQuoter {
::DDS::DataWriter_ptr ExchangeEventTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<ExchangeEvent> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr ExchangeEventTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ExchangeEvent> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ExchangeEventTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<ExchangeEvent> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<ExchangeEvent, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ExchangeEventTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<ExchangeEvent>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool ExchangeEventTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* ExchangeEventTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

ExchangeEventTypeSupport::_ptr_type ExchangeEventTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<StockQuoter::ExchangeEvent> : MetaStruct {
  typedef StockQuoter::ExchangeEvent T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "exchange")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const StockQuoter::ExchangeEvent& typed = *static_cast<const StockQuoter::ExchangeEvent*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "exchange") == 0) {
      return typed.exchange.in();
    }
    if (std::strcmp(field, "event") == 0) {
      return gen_StockQuoter_ExchangeEventType_names[typed.event];
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::ExchangeEvent)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "exchange") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'exchange' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'exchange' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'exchange' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "event") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'event' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'event' could not be skipped");
      }
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timestamp' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct StockQuoter::ExchangeEvent");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "exchange") == 0) {
      return make_field_cmp(&T::exchange, next);
    }
    if (std::strcmp(field, "event") == 0) {
      return make_field_cmp(&T::event, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::ExchangeEvent)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"exchange", "event", "timestamp", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "exchange") == 0) {
      return &static_cast<const T*>(stru)->exchange;
    }
    if (std::strcmp(field, "event") == 0) {
      return &static_cast<const T*>(stru)->event;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::ExchangeEvent)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "exchange") == 0) {
      static_cast<T*>(lhs)->exchange = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "event") == 0) {
      static_cast<T*>(lhs)->event = *static_cast<const StockQuoter::ExchangeEventType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TimeBase::TimeT*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::ExchangeEvent)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "exchange") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->exchange.in(), static_cast<const T*>(rhs)->exchange.in());
    }
    if (std::strcmp(field, "event") == 0) {
      return static_cast<const T*>(lhs)->event == static_cast<const T*>(rhs)->event;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct StockQuoter::ExchangeEvent)");
  }
};

template<>
const MetaStruct& getMetaStruct<StockQuoter::ExchangeEvent>()
{
  static MetaStructImpl<StockQuoter::ExchangeEvent> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, StockQuoter::ExchangeEvent*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<StockQuoter::ExchangeEvent>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ExchangeEvent */

/* End MODULE: StockQuoter */
