/* Generated by /home/unichae/workspace/OpenDDS-3.14/bin/opendds_idl version 3.14 (ACE version 6.2a_p19) running on input file OnboardATCS.idl */
#include "OnboardATCSTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/CorbaSeq/ShortSeqTypeSupportImpl.h"
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TimeBase */



/* Begin TYPEDEF: TimeT */


/* End TYPEDEF: TimeT */


/* Begin TYPEDEF: InaccuracyT */


/* End TYPEDEF: InaccuracyT */


/* Begin TYPEDEF: TdfT */


/* End TYPEDEF: TdfT */


/* Begin STRUCT: UtcT */


/* End STRUCT: UtcT */


/* Begin STRUCT: IntervalT */


/* End STRUCT: IntervalT */

/* End MODULE: TimeBase */


/* Begin MODULE: OnboardATCS */



/* Begin TYPEDEF: ShortSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OnboardATCS::ShortSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  size += seq.length() * gen_max_marshaled_size(CORBA::Short());
}

bool operator<<(Serializer& strm, const OnboardATCS::ShortSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  return strm.write_short_array(seq.get_buffer(), length);
}

bool operator>>(Serializer& strm, OnboardATCS::ShortSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  if (length == 0) {
    return true;
  }
  return strm.read_short_array(seq.get_buffer(), length);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, OnboardATCS::ShortSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  if (!(ser >> length)) return false;
  return ser.skip(static_cast<ACE_UINT16>(length), 2);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ShortSeq */


/* Begin STRUCT: TrainMessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const OnboardATCS::TrainMessage& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.msg_id);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.seq);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.temp.in()) + 1;
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.nid_train_id);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.nid_train_num);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.nid_lrtg);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.d_ftag);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.d_rtag);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.l_doubt_over);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.l_doubt_under);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.v_train);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.n_iter_i);
  gen_find_size(stru.d_dist_from_i, size, padding);
  gen_find_size(stru.d_dist_to_i, size, padding);
  gen_find_size(stru.nid_tag_from_i, size, padding);
  gen_find_size(stru.nid_tag_to_i, size, padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.n_iter_j);
  gen_find_size(stru.nid_switch_j, size, padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.n_iter_k);
  gen_find_size(stru.d_sdist_from_k, size, padding);
  gen_find_size(stru.d_stag_from_k, size, padding);
  gen_find_size(stru.nid_stag_from_k, size, padding);
  gen_find_size(stru.nid_stag_to_k, size, padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.n_iter_l);
  gen_find_size(stru.nid_switch_id_l, size, padding);
}

bool operator<<(Serializer& strm, const OnboardATCS::TrainMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.msg_id)
    && (strm << stru.seq)
    && (strm << stru.timestamp)
    && (strm << stru.temp.in())
    && (strm << stru.nid_train_id)
    && (strm << stru.nid_train_num)
    && (strm << stru.nid_lrtg)
    && (strm << stru.d_ftag)
    && (strm << stru.d_rtag)
    && (strm << stru.l_doubt_over)
    && (strm << stru.l_doubt_under)
    && (strm << stru.v_train)
    && (strm << stru.n_iter_i)
    && (strm << stru.d_dist_from_i)
    && (strm << stru.d_dist_to_i)
    && (strm << stru.nid_tag_from_i)
    && (strm << stru.nid_tag_to_i)
    && (strm << stru.n_iter_j)
    && (strm << stru.nid_switch_j)
    && (strm << stru.n_iter_k)
    && (strm << stru.d_sdist_from_k)
    && (strm << stru.d_stag_from_k)
    && (strm << stru.nid_stag_from_k)
    && (strm << stru.nid_stag_to_k)
    && (strm << stru.n_iter_l)
    && (strm << stru.nid_switch_id_l);
}

bool operator>>(Serializer& strm, OnboardATCS::TrainMessage& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.msg_id)
    && (strm >> stru.seq)
    && (strm >> stru.timestamp)
    && (strm >> stru.temp.out())
    && (strm >> stru.nid_train_id)
    && (strm >> stru.nid_train_num)
    && (strm >> stru.nid_lrtg)
    && (strm >> stru.d_ftag)
    && (strm >> stru.d_rtag)
    && (strm >> stru.l_doubt_over)
    && (strm >> stru.l_doubt_under)
    && (strm >> stru.v_train)
    && (strm >> stru.n_iter_i)
    && (strm >> stru.d_dist_from_i)
    && (strm >> stru.d_dist_to_i)
    && (strm >> stru.nid_tag_from_i)
    && (strm >> stru.nid_tag_to_i)
    && (strm >> stru.n_iter_j)
    && (strm >> stru.nid_switch_j)
    && (strm >> stru.n_iter_k)
    && (strm >> stru.d_sdist_from_k)
    && (strm >> stru.d_stag_from_k)
    && (strm >> stru.nid_stag_from_k)
    && (strm >> stru.nid_stag_to_k)
    && (strm >> stru.n_iter_l)
    && (strm >> stru.nid_switch_id_l);
}

size_t gen_max_marshaled_size(const OnboardATCS::TrainMessage& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const OnboardATCS::TrainMessage> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 2;
}

void gen_find_size(KeyOnly<const OnboardATCS::TrainMessage> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 2) {
    padding += 2 - ((size + padding) % 2);
  }
  size += gen_max_marshaled_size(stru.t.nid_train_id);
}

bool operator<<(Serializer& strm, KeyOnly<const OnboardATCS::TrainMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.nid_train_id);
}

bool operator>>(Serializer& strm, KeyOnly<OnboardATCS::TrainMessage> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.nid_train_id);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace OnboardATCS {
::DDS::DataWriter_ptr TrainMessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<TrainMessage> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr TrainMessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TrainMessage> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr TrainMessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<TrainMessage> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<TrainMessage, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& TrainMessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<TrainMessage>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool TrainMessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* TrainMessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

TrainMessageTypeSupport::_ptr_type TrainMessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OnboardATCS::TrainMessage> : MetaStruct {
  typedef OnboardATCS::TrainMessage T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "nid_train_id")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const OnboardATCS::TrainMessage& typed = *static_cast<const OnboardATCS::TrainMessage*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "msg_id") == 0) {
      return typed.msg_id;
    }
    if (std::strcmp(field, "seq") == 0) {
      return typed.seq;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    if (std::strcmp(field, "temp") == 0) {
      return typed.temp.in();
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      return typed.nid_train_id;
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      return typed.nid_train_num;
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      return typed.nid_lrtg;
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      return typed.d_ftag;
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      return typed.d_rtag;
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      return typed.l_doubt_over;
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      return typed.l_doubt_under;
    }
    if (std::strcmp(field, "v_train") == 0) {
      return typed.v_train;
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      return typed.n_iter_i;
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      return typed.n_iter_j;
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      return typed.n_iter_k;
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      return typed.n_iter_l;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OnboardATCS::TrainMessage)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "msg_id") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'msg_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'msg_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "seq") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'seq' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'seq' could not be skipped");
      }
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timestamp' could not be skipped");
      }
    }
    if (std::strcmp(field, "temp") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'temp' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'temp' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'temp' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'nid_train_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'nid_train_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'nid_train_num' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'nid_train_num' could not be skipped");
      }
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'nid_lrtg' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'nid_lrtg' could not be skipped");
      }
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'd_ftag' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'd_ftag' could not be skipped");
      }
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'd_rtag' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'd_rtag' could not be skipped");
      }
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'l_doubt_over' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'l_doubt_over' could not be skipped");
      }
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'l_doubt_under' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'l_doubt_under' could not be skipped");
      }
    }
    if (std::strcmp(field, "v_train") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'v_train' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'v_train' could not be skipped");
      }
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'n_iter_i' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'n_iter_i' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'n_iter_j' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'n_iter_j' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'n_iter_k' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'n_iter_k' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      ACE_CDR::Short val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'n_iter_l' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 2)) {
        throw std::runtime_error("Field 'n_iter_l' could not be skipped");
      }
    }
    if (!gen_skip_over(ser, static_cast<OnboardATCS::ShortSeq*>(0))) {
      throw std::runtime_error("Field " + OPENDDS_STRING(field) + " could not be skipped");
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct OnboardATCS::TrainMessage");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "msg_id") == 0) {
      return make_field_cmp(&T::msg_id, next);
    }
    if (std::strcmp(field, "seq") == 0) {
      return make_field_cmp(&T::seq, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    if (std::strcmp(field, "temp") == 0) {
      return make_field_cmp(&T::temp, next);
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      return make_field_cmp(&T::nid_train_id, next);
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      return make_field_cmp(&T::nid_train_num, next);
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      return make_field_cmp(&T::nid_lrtg, next);
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      return make_field_cmp(&T::d_ftag, next);
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      return make_field_cmp(&T::d_rtag, next);
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      return make_field_cmp(&T::l_doubt_over, next);
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      return make_field_cmp(&T::l_doubt_under, next);
    }
    if (std::strcmp(field, "v_train") == 0) {
      return make_field_cmp(&T::v_train, next);
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      return make_field_cmp(&T::n_iter_i, next);
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      return make_field_cmp(&T::n_iter_j, next);
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      return make_field_cmp(&T::n_iter_k, next);
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      return make_field_cmp(&T::n_iter_l, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OnboardATCS::TrainMessage)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"msg_id", "seq", "timestamp", "temp", "nid_train_id", "nid_train_num", "nid_lrtg", "d_ftag", "d_rtag", "l_doubt_over", "l_doubt_under", "v_train", "n_iter_i", "d_dist_from_i", "d_dist_to_i", "nid_tag_from_i", "nid_tag_to_i", "n_iter_j", "nid_switch_j", "n_iter_k", "d_sdist_from_k", "d_stag_from_k", "nid_stag_from_k", "nid_stag_to_k", "n_iter_l", "nid_switch_id_l", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "msg_id") == 0) {
      return &static_cast<const T*>(stru)->msg_id;
    }
    if (std::strcmp(field, "seq") == 0) {
      return &static_cast<const T*>(stru)->seq;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    if (std::strcmp(field, "temp") == 0) {
      return &static_cast<const T*>(stru)->temp;
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      return &static_cast<const T*>(stru)->nid_train_id;
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      return &static_cast<const T*>(stru)->nid_train_num;
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      return &static_cast<const T*>(stru)->nid_lrtg;
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      return &static_cast<const T*>(stru)->d_ftag;
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      return &static_cast<const T*>(stru)->d_rtag;
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      return &static_cast<const T*>(stru)->l_doubt_over;
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      return &static_cast<const T*>(stru)->l_doubt_under;
    }
    if (std::strcmp(field, "v_train") == 0) {
      return &static_cast<const T*>(stru)->v_train;
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      return &static_cast<const T*>(stru)->n_iter_i;
    }
    if (std::strcmp(field, "d_dist_from_i") == 0) {
      return &static_cast<const T*>(stru)->d_dist_from_i;
    }
    if (std::strcmp(field, "d_dist_to_i") == 0) {
      return &static_cast<const T*>(stru)->d_dist_to_i;
    }
    if (std::strcmp(field, "nid_tag_from_i") == 0) {
      return &static_cast<const T*>(stru)->nid_tag_from_i;
    }
    if (std::strcmp(field, "nid_tag_to_i") == 0) {
      return &static_cast<const T*>(stru)->nid_tag_to_i;
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      return &static_cast<const T*>(stru)->n_iter_j;
    }
    if (std::strcmp(field, "nid_switch_j") == 0) {
      return &static_cast<const T*>(stru)->nid_switch_j;
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      return &static_cast<const T*>(stru)->n_iter_k;
    }
    if (std::strcmp(field, "d_sdist_from_k") == 0) {
      return &static_cast<const T*>(stru)->d_sdist_from_k;
    }
    if (std::strcmp(field, "d_stag_from_k") == 0) {
      return &static_cast<const T*>(stru)->d_stag_from_k;
    }
    if (std::strcmp(field, "nid_stag_from_k") == 0) {
      return &static_cast<const T*>(stru)->nid_stag_from_k;
    }
    if (std::strcmp(field, "nid_stag_to_k") == 0) {
      return &static_cast<const T*>(stru)->nid_stag_to_k;
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      return &static_cast<const T*>(stru)->n_iter_l;
    }
    if (std::strcmp(field, "nid_switch_id_l") == 0) {
      return &static_cast<const T*>(stru)->nid_switch_id_l;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OnboardATCS::TrainMessage)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "msg_id") == 0) {
      static_cast<T*>(lhs)->msg_id = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "seq") == 0) {
      static_cast<T*>(lhs)->seq = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TimeBase::TimeT*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "temp") == 0) {
      static_cast<T*>(lhs)->temp = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      static_cast<T*>(lhs)->nid_train_id = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      static_cast<T*>(lhs)->nid_train_num = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      static_cast<T*>(lhs)->nid_lrtg = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      static_cast<T*>(lhs)->d_ftag = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      static_cast<T*>(lhs)->d_rtag = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      static_cast<T*>(lhs)->l_doubt_over = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      static_cast<T*>(lhs)->l_doubt_under = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "v_train") == 0) {
      static_cast<T*>(lhs)->v_train = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      static_cast<T*>(lhs)->n_iter_i = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_dist_from_i") == 0) {
      static_cast<T*>(lhs)->d_dist_from_i = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_dist_to_i") == 0) {
      static_cast<T*>(lhs)->d_dist_to_i = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_tag_from_i") == 0) {
      static_cast<T*>(lhs)->nid_tag_from_i = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_tag_to_i") == 0) {
      static_cast<T*>(lhs)->nid_tag_to_i = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      static_cast<T*>(lhs)->n_iter_j = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_switch_j") == 0) {
      static_cast<T*>(lhs)->nid_switch_j = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      static_cast<T*>(lhs)->n_iter_k = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_sdist_from_k") == 0) {
      static_cast<T*>(lhs)->d_sdist_from_k = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "d_stag_from_k") == 0) {
      static_cast<T*>(lhs)->d_stag_from_k = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_stag_from_k") == 0) {
      static_cast<T*>(lhs)->nid_stag_from_k = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_stag_to_k") == 0) {
      static_cast<T*>(lhs)->nid_stag_to_k = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      static_cast<T*>(lhs)->n_iter_l = *static_cast<const CORBA::Short*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nid_switch_id_l") == 0) {
      static_cast<T*>(lhs)->nid_switch_id_l = *static_cast<const OnboardATCS::ShortSeq*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OnboardATCS::TrainMessage)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "msg_id") == 0) {
      return static_cast<const T*>(lhs)->msg_id == static_cast<const T*>(rhs)->msg_id;
    }
    if (std::strcmp(field, "seq") == 0) {
      return static_cast<const T*>(lhs)->seq == static_cast<const T*>(rhs)->seq;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    if (std::strcmp(field, "temp") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->temp.in(), static_cast<const T*>(rhs)->temp.in());
    }
    if (std::strcmp(field, "nid_train_id") == 0) {
      return static_cast<const T*>(lhs)->nid_train_id == static_cast<const T*>(rhs)->nid_train_id;
    }
    if (std::strcmp(field, "nid_train_num") == 0) {
      return static_cast<const T*>(lhs)->nid_train_num == static_cast<const T*>(rhs)->nid_train_num;
    }
    if (std::strcmp(field, "nid_lrtg") == 0) {
      return static_cast<const T*>(lhs)->nid_lrtg == static_cast<const T*>(rhs)->nid_lrtg;
    }
    if (std::strcmp(field, "d_ftag") == 0) {
      return static_cast<const T*>(lhs)->d_ftag == static_cast<const T*>(rhs)->d_ftag;
    }
    if (std::strcmp(field, "d_rtag") == 0) {
      return static_cast<const T*>(lhs)->d_rtag == static_cast<const T*>(rhs)->d_rtag;
    }
    if (std::strcmp(field, "l_doubt_over") == 0) {
      return static_cast<const T*>(lhs)->l_doubt_over == static_cast<const T*>(rhs)->l_doubt_over;
    }
    if (std::strcmp(field, "l_doubt_under") == 0) {
      return static_cast<const T*>(lhs)->l_doubt_under == static_cast<const T*>(rhs)->l_doubt_under;
    }
    if (std::strcmp(field, "v_train") == 0) {
      return static_cast<const T*>(lhs)->v_train == static_cast<const T*>(rhs)->v_train;
    }
    if (std::strcmp(field, "n_iter_i") == 0) {
      return static_cast<const T*>(lhs)->n_iter_i == static_cast<const T*>(rhs)->n_iter_i;
    }
    if (std::strcmp(field, "n_iter_j") == 0) {
      return static_cast<const T*>(lhs)->n_iter_j == static_cast<const T*>(rhs)->n_iter_j;
    }
    if (std::strcmp(field, "n_iter_k") == 0) {
      return static_cast<const T*>(lhs)->n_iter_k == static_cast<const T*>(rhs)->n_iter_k;
    }
    if (std::strcmp(field, "n_iter_l") == 0) {
      return static_cast<const T*>(lhs)->n_iter_l == static_cast<const T*>(rhs)->n_iter_l;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct OnboardATCS::TrainMessage)");
  }
};

template<>
const MetaStruct& getMetaStruct<OnboardATCS::TrainMessage>()
{
  static MetaStructImpl<OnboardATCS::TrainMessage> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, OnboardATCS::TrainMessage*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OnboardATCS::TrainMessage>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: TrainMessage */

/* End MODULE: OnboardATCS */
